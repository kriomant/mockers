///! Manual runtime type info for mocking generic methods

pub trait TypeInfo {
    fn get_type_id() -> usize;
    fn get_type_name() -> &'static str;
}

/// Panics with message explaining that types used as type parameters of mocked generic
/// methods must be registered using `register_types` macro.
/// This method is used by code generated by mocking macros.
pub fn fail_type_info_not_found() -> ! {
    panic!("{}", concat!(
        "\n\n",
        colored!(red: "error:"),
        colored!(bold: " Generic method was called with unknown type parameter."),
        "\n\n",
        colored!(green: "note:"),
        " All types which may be used as type parameters for mocked generic methods must be",
        "registered using `register_types` macro. Use it like this:\n",
        "\n",
        "    use mockers::{register_types, mocked};\n",
        "\n",
        "    ",
        colored!(bold: "register_types!(u32, &str);\n"),
        "\n",
        "    #[mocked]\n",
        "    trait A {\n",
        "        fn generic_method<T>(t: T);\n",
        "    }\n",
        "\n",
        "    #[test]\n",
        "    #[should_panic]\n",
        "    fn test_generic_method() {\n",
        "        let scenario = Scenario::new();\n",
        "        let mock = scenario.create_mock::<AMock>();\n",
        "\n",
        "        scenario.expect(mock.generic_method(\"foo\").and_return(()));\n",
        "        mock.generic_method(2u32);\n",
        "    }\n",
        "\n"
    ))
}
